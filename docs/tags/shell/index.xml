<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on KhanhIceTea B(rain)-log</title>
    <link>https://khanhicetea.com/tags/shell/</link>
    <description>Recent content in Shell on KhanhIceTea B(rain)-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://khanhicetea.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What I learned in 2017-09-27</title>
      <link>https://khanhicetea.com/til/2017-09-27/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-09-27/</guid>
      <description>LINUX Send ENTER key to kernel When you try to send an Enter keyboard to linux kernel, it looks like nothing happens.
This is because you only send a key press (KEY DOWN) but don&amp;rsquo;t send an key release (KEY UP) event after that.
SYSADMIN BASH tracing commands Thanks Hiro Ishii teach me this
set -x will print all running commands in your bash script
So I dove in and look for all set options of BASH.</description>
    </item>
    
    <item>
      <title>What I learned in 2017-09-26</title>
      <link>https://khanhicetea.com/til/2017-09-26/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-09-26/</guid>
      <description>SYSADMIN BASH exiting on first error Setting a flag set -e to bash script will let the script exit on first error occurs, so if you want to ignore a command just adding || true to suffix
set -e errorCmd $1 || true echo &amp;quot;Run here !&amp;quot;  And opposite of set -e is set +e, haha of course !
set +e errorCmd $1 echo &amp;quot;Still run here !&amp;quot;  SYSADMIN BASH return a value in function Creating function is a good way to refactor your bash script.</description>
    </item>
    
    <item>
      <title>What I learned in 2017-05-22</title>
      <link>https://khanhicetea.com/til/2017-05-22/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-05-22/</guid>
      <description>SYSADMIN Using BSD find util to find and exec command on file and folder Simple syntax of find
$ find [find_path] -type [file_type] -exec [command] {} \;  Add filename matching pattern to filter the result
$ find [find_path] -name &amp;quot;*.php&amp;quot; -type [file_type] -exec [command] {} \;  Where file_type is :
 b : block special c : character special d : directory f : regular file l : symbolic link p : FIFO s : socket  Examples:</description>
    </item>
    
    <item>
      <title>What I learned in 2017-05-19</title>
      <link>https://khanhicetea.com/til/2017-05-19/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-05-19/</guid>
      <description>DEVOPS Checking forced push conflicts on source code in auto testing Using automated CI solution likes Travis, Jenkins, DroneCI, &amp;hellip; is good solution to ensure quality of software and no breaks in deployment.
Sometimes, developers force push conflicts part to production branch of source code. If the CI tests only backend (python, ruby, php, go, ..) and forget about frontend code, then your application will be exploded !
So checking the conflicts code is required step before testing backend and deployment.</description>
    </item>
    
    <item>
      <title>What I learned in 2016-03-26</title>
      <link>https://khanhicetea.com/til/2016-03-26/</link>
      <pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2016-03-26/</guid>
      <description>SYSADMIN Bash shell shortcuts  Ctrl + e : jump cursor to EOL Ctrl + a : jump cursor to BOL (beginning of line) Ctrl + u : delete all from cursor to BOL Ctrl + k : delete all from cursor to EOL Ctrl + r : search history, press again for next search Ctrl + l : clear shell screen Ctrl + c : terminate the command (sometimes have to press twice) Ctrl + z : suspend the command, back to shell.</description>
    </item>
    
  </channel>
</rss>