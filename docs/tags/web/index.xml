<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on KhanhIceTea B(rain)-log</title>
    <link>https://khanhicetea.com/tags/web/</link>
    <description>Recent content in Web on KhanhIceTea B(rain)-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Mar 2018 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://khanhicetea.com/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#TIL : Sending Cookie in AJAX CORs request</title>
      <link>https://khanhicetea.com/til/2018-03-01-sending-cookie-in-ajax-cors-request/</link>
      <pubDate>Thu, 01 Mar 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-03-01-sending-cookie-in-ajax-cors-request/</guid>
      <description>Sending Cookie in AJAX CORs request By default, browser will remove the cookie and authorization header from AJAX CORs request. So before sending out the request, make sure withCredentials must be true.
In this case, CORs response must specify which origin is allowed (mean no wildcard allowed origin rule).</description>
    </item>
    
    <item>
      <title>#TIL : Tracking changes of cookie on webpage</title>
      <link>https://khanhicetea.com/til/2018-01-10-tracking-changes-of-cookie-on-webpage/</link>
      <pubDate>Wed, 10 Jan 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-01-10-tracking-changes-of-cookie-on-webpage/</guid>
      <description>Tracking changes of cookie on webpage Using Object.defineProperty helper function as I wrote 3 days ago. We could track the changes of cookie on webpage.
// Based on Vlad Shevchenko&#39;s script at https://stackoverflow.com/a/36826049 var cookieSetterOrig = document.__lookupSetter__(&amp;quot;cookie&amp;quot;); // get origin setter function var cookieGetterOrig = document.__lookupGetter__(&amp;quot;cookie&amp;quot;); // get origin getter function Object.defineProperty(document, &amp;quot;cookie&amp;quot;, { get: function () { console.trace(); return cookieGetterOrig.apply(document); }, set: function () { console.log(arguments); console.trace(); return cookieSetterOrig.</description>
    </item>
    
    <item>
      <title>#TIL : Bypass CORS by using JSONP callback</title>
      <link>https://khanhicetea.com/til/2018-01-08-bypass-cors-by-using-jsonp-callback/</link>
      <pubDate>Mon, 08 Jan 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-01-08-bypass-cors-by-using-jsonp-callback/</guid>
      <description>Bypass CORS by using JSONP callback Sometimes you are blocked from request a cross-origin resource. Instead of adding our domain to allowed list of them, we can use another way to retrieve data from their API by using JSONP (in case they support it).
The mechanism of JSONP is simple, instead of returning a JSON data. It will return a javascript text with passing your data into a function, whose name is declared in query string.</description>
    </item>
    
    <item>
      <title>#TIL : Sleeping connections in MySQL</title>
      <link>https://khanhicetea.com/til/2018-01-04-sleeping-connections-in-mysql/</link>
      <pubDate>Thu, 04 Jan 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-01-04-sleeping-connections-in-mysql/</guid>
      <description>Sleeping connections in MySQL When you check your MySQL process list via command show processlist;, it will show you a useful table which provide all current connection details.
&amp;ldquo;Sleep&amp;rdquo; state connections are most connection pointer waiting for the timeout to terminate. Then they still count as a connection. (Can cause MySQL connection limit error, which default equal 150 connections)
So next time, remember to close your connection before terminating your app.</description>
    </item>
    
    <item>
      <title>#TIL : HSTS rule in browser</title>
      <link>https://khanhicetea.com/til/2018-01-03-hsts-rule-in-browser/</link>
      <pubDate>Wed, 03 Jan 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-01-03-hsts-rule-in-browser/</guid>
      <description>HSTS rule in browser HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking.
Enabling HSTS on your web will make your browser validate every SSL issues more strictly :
 User can not visit http version on browser User can not add SSL exception for the domain to ignore the warning. (when SSL cert expire or invalid common name)  Note : You can manually remove a domain from HSTS in Chrome by accessing this page URL chrome://net-internals/#hsts</description>
    </item>
    
    <item>
      <title>#TIL : Using web proxy to bypass firewalls</title>
      <link>https://khanhicetea.com/til/2017-12-07-using-web-proxy-to-bypass-firewalls/</link>
      <pubDate>Thu, 07 Dec 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-12-07-using-web-proxy-to-bypass-firewalls/</guid>
      <description>Using web proxy to bypass firewalls Someday, you will be blocked by a firewall while trying crawling or accessing some website. The reason is they block your IP address from accessing the server.
One solution is using a web proxy (http proxy, socks4 or socks5) to bypass the firewall, by adding the middle-man server between you and target. It&amp;rsquo;s a bit unsecured but you could use for https site only.</description>
    </item>
    
    <item>
      <title>#TIL : Enable reverse proxy in CentOS</title>
      <link>https://khanhicetea.com/til/2017-09-01-enable-reverse-proxy-in-centos/</link>
      <pubDate>Fri, 01 Sep 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-09-01-enable-reverse-proxy-in-centos/</guid>
      <description> Enable reverse proxy in CentOS CentOS with SELinux enabled by default will block any http proxy connection. So you have to enable this permission.
Temporary enable
$ /usr/sbin/setsebool httpd_can_network_connect 1  Permanent enable
$ /usr/sbin/setsebool -P httpd_can_network_connect 1  </description>
    </item>
    
    <item>
      <title>#TIL : Ping Google to crawl updated content</title>
      <link>https://khanhicetea.com/til/2017-08-08-ping-google-to-crawl-updated-content/</link>
      <pubDate>Tue, 08 Aug 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-08-08-ping-google-to-crawl-updated-content/</guid>
      <description>Ping Google to crawl updated content When you post new content to your website, the fastest way is ping search engines to notify them. After that, they will try to crawl and index your page.
One way to ping search engines is using XMLRPC ping
This is a example XMLRPC request (HTTP POST request with xml body)
Request
&amp;gt; POST /ping/RPC2 HTTP/1.1 &amp;gt; Host: blogsearch.google.com &amp;gt; User-Agent: curl/7.47.0 &amp;gt; Accept: */* &amp;gt; content-type: application/xml &amp;gt; Content-Length: 239 &amp;gt; &amp;lt;?</description>
    </item>
    
    <item>
      <title>#TIL : Cloudflare Error 522 Connection Time out</title>
      <link>https://khanhicetea.com/til/2017-05-18-cloudflare-error-522-connection-time-out/</link>
      <pubDate>Thu, 18 May 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-05-18-cloudflare-error-522-connection-time-out/</guid>
      <description>Cloudflare Error 522 Connection Time out If you are using Cloudflare as a proxied web server, it will provide many benefits about performance (assets caching, prevent DDOS and cheap CDN). But sometimes, you will face to this error &amp;ldquo;522 Connection Time out&amp;rdquo;.
The problems caused by :
 Networking (CF can&amp;rsquo;t touch origin server : Firewall blocking, Network Layer #1,#2,#3 issue) Timeout (origin server process too long than 90 seconds) Empty or invalid response from origin server No or big HTTP headers (&amp;gt; 8Kb) Failed TCP handshake  Ref:</description>
    </item>
    
    <item>
      <title>#TIL : Base 64 encode and decode builtin tool</title>
      <link>https://khanhicetea.com/til/2017-04-21-base-64-encode-and-decode-builtin-tool/</link>
      <pubDate>Fri, 21 Apr 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-04-21-base-64-encode-and-decode-builtin-tool/</guid>
      <description> Base 64 encode and decode builtin tool Browsers have helpers function to encode and decode base64 :
 btoa : base64 encode atob : base64 decode  &amp;gt; btoa(&#39;Hello world&#39;) &amp;quot;SGVsbG8gV29ybGQgIQ==&amp;quot; &amp;gt; atob(&#39;SW4gR29kIFdlIFRydXN0ICE=&#39;) &amp;quot;In God We Trust !&amp;quot;  </description>
    </item>
    
    <item>
      <title>#TIL : ab failed responses</title>
      <link>https://khanhicetea.com/til/2017-04-21-ab-failed-responses/</link>
      <pubDate>Fri, 21 Apr 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-04-21-ab-failed-responses/</guid>
      <description>ab failed responses When benchmarking a HTTP application server using ab tool, you shouldn&amp;rsquo;t only care about how many requests per second, but percentage of Success responses.
A notice that you must have the same content-length in responses, because ab tool will assume response having different content-length from Document Length (in ab result) is failed response.
Example
Webserver using Flask
from flask import Flask from random import randint app = Flask(__name__) @app.</description>
    </item>
    
    <item>
      <title>Sử dụng Frontend Boilerplate cho việc cắt HTML Layout</title>
      <link>https://khanhicetea.com/post/use_frontend_boilerplate_for_development/</link>
      <pubDate>Mon, 13 Jun 2016 18:12:50 +0700</pubDate>
      
      <guid>https://khanhicetea.com/post/use_frontend_boilerplate_for_development/</guid>
      <description>Giới thiệu Khi cắt HTML Layout từ PSD, bạn sẽ đối mặt với việc bên Design hoặc khách hàng thường xuyên yêu cầu thay đổi giao diện, thiết kế. Điều này gây ra không ít phiền nhiễu và tốn thời gian nếu cứ cập nhật hàng tá giao diện nếu sự thay đổi ảnh hưởng đến những phần layout chính (header, footer, sidebar).
Sử dụng bộ khung sườn (boiler-plate) này, sẽ giúp bạn hạn chế thao tác lặp đi, lặp lại.</description>
    </item>
    
  </channel>
</rss>