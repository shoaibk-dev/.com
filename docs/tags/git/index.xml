<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on KhanhIceTea B(rain)-log</title>
    <link>https://khanhicetea.com/tags/git/</link>
    <description>Recent content in Git on KhanhIceTea B(rain)-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 May 2018 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://khanhicetea.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#TIL : Put .git data outside project directory</title>
      <link>https://khanhicetea.com/til/2018-05-29-put-git-data-outside-project-directory/</link>
      <pubDate>Tue, 29 May 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-05-29-put-git-data-outside-project-directory/</guid>
      <description>Put .git data outside project directory Sometimes you want to put .git data into outside directory (to use another disk partition or to protect your git data). Use --separate-git-dir= option to get that.
Example :
$ git init --separate-git-dir=/var/gitstorage/myproject  Bonus : to protect .git data from other users, use this option --shared within octal value (same to chmod)
Example : this will protect git file from writing by group and reading/writing by others</description>
    </item>
    
    <item>
      <title>#TIL : Fastly conflict detector script</title>
      <link>https://khanhicetea.com/til/2017-11-27-fastly-conflict-detector-script/</link>
      <pubDate>Mon, 27 Nov 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-11-27-fastly-conflict-detector-script/</guid>
      <description>Fastly conflict detector script Last month, I built a CI solution for our project and adding a conflict detector to our build commands. This script runned so slow because it will check all application files (and our application codebase has many of css, js files).
This was the script
#!/bin/bash grep -rli --exclude=conflict_detector.sh --exclude-dir={.git,vendor,node_modules} &amp;quot;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&amp;quot; . if [ $? -eq 0 ]; then exit 1 else exit 0 fi  Today, I think why don&amp;rsquo;t we just check recently updated files (in the latest commit) ?</description>
    </item>
    
    <item>
      <title>#TIL : using git hooks to improve working flow</title>
      <link>https://khanhicetea.com/til/2017-11-22-using-git-hooks-to-improve-working-flow/</link>
      <pubDate>Wed, 22 Nov 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-11-22-using-git-hooks-to-improve-working-flow/</guid>
      <description>using git hooks to improve working flow We can improve our team workflow by defining some git hooks that trigger on specified events. You can read all events and their usecases here : https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks
This is what I implemented to my today-i-learned repo. I used pre-commit to update Table of Contents in the README.md file, so every content in my repo will be updated on Github repo page.
$ ln pre-commit .</description>
    </item>
    
    <item>
      <title>#TIL : Resolving conflict like a boss</title>
      <link>https://khanhicetea.com/til/2017-06-13-resolving-conflict-like-a-boss/</link>
      <pubDate>Tue, 13 Jun 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-06-13-resolving-conflict-like-a-boss/</guid>
      <description>Resolving conflict like a boss When using git merge new branch to old branch, you just want use all ours or theirs version but be lazy to update every conflicted file.
grep -lr &#39;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&#39; . | xargs git checkout --ours  Or
grep -lr &#39;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&#39; . | xargs git checkout --theirs  Explain : these commands will find any file contains &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; string (conflicted file) and run git checkout --[side]</description>
    </item>
    
  </channel>
</rss>