<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ci on KhanhIceTea B(rain)-log</title>
    <link>https://khanhicetea.com/tags/ci/</link>
    <description>Recent content in Ci on KhanhIceTea B(rain)-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Nov 2017 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://khanhicetea.com/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#TIL : Fastly conflict detector script</title>
      <link>https://khanhicetea.com/til/2017-11-27-fastly-conflict-detector-script/</link>
      <pubDate>Mon, 27 Nov 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-11-27-fastly-conflict-detector-script/</guid>
      <description>Fastly conflict detector script Last month, I built a CI solution for our project and adding a conflict detector to our build commands. This script runned so slow because it will check all application files (and our application codebase has many of css, js files).
This was the script
#!/bin/bash grep -rli --exclude=conflict_detector.sh --exclude-dir={.git,vendor,node_modules} &amp;quot;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&amp;quot; . if [ $? -eq 0 ]; then exit 1 else exit 0 fi  Today, I think why don&amp;rsquo;t we just check recently updated files (in the latest commit) ?</description>
    </item>
    
    <item>
      <title>#TIL : Reduce init time MySQL docker image</title>
      <link>https://khanhicetea.com/til/2017-11-22-reduce-init-time-mysql-docker-image/</link>
      <pubDate>Wed, 22 Nov 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-11-22-reduce-init-time-mysql-docker-image/</guid>
      <description>Reduce init time MySQL docker image Original MySQL docker image uses a script to generate ssl certificates for service. Sometime we don&amp;rsquo;t really need it (connect via a docker network link or need a fast enough database service to build a automated test).
We can reduce init time by removing the script from original Docker image
FROM mysql:5.7 # Remove mysql_ssl_rsa_setup to ignore setup SSL certs RUN rm -f /usr/bin/mysql_ssl_rsa_setup   FAST as a FEATURE !</description>
    </item>
    
    <item>
      <title>Building Automated CI server with Drone and Docker</title>
      <link>https://khanhicetea.com/post/building-automated-ci-server-with-drone-and-docker/</link>
      <pubDate>Wed, 08 Nov 2017 17:20:46 +0700</pubDate>
      
      <guid>https://khanhicetea.com/post/building-automated-ci-server-with-drone-and-docker/</guid>
      <description>Introduction Docker is great tool to management linux containers. It brings DevOps to next level, from development to production environment. And of course, before deploy anything to production, software should be tested carefully and automatically.
That&amp;rsquo;s why Drone, a new lightweight CI server built-on top Go lang and Docker, will help us to resolve the testing problems in simple and fast way.
Setup This guide will assume you already have Docker and Docker Compose tool.</description>
    </item>
    
    <item>
      <title>#TIL : Using netcat to wait a TCP service</title>
      <link>https://khanhicetea.com/til/2017-10-13-using-netcat-to-wait-a-tcp-service/</link>
      <pubDate>Fri, 13 Oct 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-10-13-using-netcat-to-wait-a-tcp-service/</guid>
      <description>Using netcat to wait a TCP service When doing a CI/CD testing, you would need to connect a external service (RDBMS, HTTP server or generic TCP server service). So you need waiting the service before running your test app.
One way to do right waiting instead of sleep for a specified time is using netcat tool
$ while ! echo -e &#39;\x04&#39; | nc [service_host] [service_port]; do sleep 1; done;  Examples</description>
    </item>
    
  </channel>
</rss>