<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on KhanhIceTea B(rain)-log</title>
    <link>https://khanhicetea.com/tags/networking/</link>
    <description>Recent content in Networking on KhanhIceTea B(rain)-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Apr 2018 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://khanhicetea.com/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#TIL 2018-04-24 : Setup wildcard domains .test for development in MacOS</title>
      <link>https://khanhicetea.com/til/2018-04-24-setup-wildcard-domains-test-for-development-in-macos/</link>
      <pubDate>Tue, 24 Apr 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-04-24-setup-wildcard-domains-test-for-development-in-macos/</guid>
      <description>Setup wildcard domains .test for development in MacOS Too tired of setting your local domain each time you create new virtual development domain, etc helloworld.test, unit.test point to 127.0.0.1
There is a better way to achieve that by using dnsmasq, then set up a wildcard domains for development. In this case I use .test because .dev has been owned by Google and they strictly use HTTPS in mainly browsers.</description>
    </item>
    
    <item>
      <title>#TIL 2018-04-10 : Send a file through networking via netcat</title>
      <link>https://khanhicetea.com/til/2018-04-10-send-a-file-through-networking-via-netcat/</link>
      <pubDate>Tue, 10 Apr 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-04-10-send-a-file-through-networking-via-netcat/</guid>
      <description>Send a file through networking via netcat If you&amp;rsquo;re working on 2 machines in same networking and want to send a file from machine A to machine B. But you don&amp;rsquo;t have USB, floopy disk :lol: or insanse Bluetooth. There is simple way to send a file to another computer without setting up SSH or SMB (althrough these way are safer than it).
On the machine A (with IP address : 192.</description>
    </item>
    
    <item>
      <title>#TIL 2018-02-21 : List opening ports or listening UNIX sockets</title>
      <link>https://khanhicetea.com/til/2018-02-21-list-opening-ports-or-listening-unix-sockets/</link>
      <pubDate>Wed, 21 Feb 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-02-21-list-opening-ports-or-listening-unix-sockets/</guid>
      <description>List opening ports or listening UNIX sockets In Linux, you can use netstat to list all opening ports and listening UNIX sockets
$ sudo netstat -npl  Tip to remember command : network statistics - natual languge processing
;)</description>
    </item>
    
    <item>
      <title>#TIL 2018-01-16 : Disable IPv6 to stop getting stuck in network</title>
      <link>https://khanhicetea.com/til/2018-01-16-disable-ipv6-to-stop-getting-stuck-in-network/</link>
      <pubDate>Tue, 16 Jan 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-01-16-disable-ipv6-to-stop-getting-stuck-in-network/</guid>
      <description>Disable IPv6 to stop getting stuck in network I know IPv6 will be future for networking, but at this moment &amp;ldquo;It&amp;rsquo;s suck !&amp;rdquo; :(
Some service will be failed when trying to connect IPv6 destination :
 apt package manager smtp curl  So I decided to disable IPv6 on every production server.
$ echo &amp;quot;net.ipv6.conf.all.disable_ipv6 = 1&amp;quot; | sudo tee -a /etc/sysctl.conf $ echo &amp;quot;net.ipv6.conf.default.disable_ipv6 = 1&amp;quot; | sudo tee -a /etc/sysctl.</description>
    </item>
    
    <item>
      <title>#TIL 2018-01-16 : Set up simple rate limiting on specified port using UFW</title>
      <link>https://khanhicetea.com/til/2018-01-16-set-up-simple-rate-limiting-on-specified-port-using-ufw/</link>
      <pubDate>Tue, 16 Jan 2018 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2018-01-16-set-up-simple-rate-limiting-on-specified-port-using-ufw/</guid>
      <description>Set up simple rate limiting on specified port using UFW Allow unmetrered connections on networking is so risky. Attacker can use the brute-force attacks to comprosise your service (or simple DOS).
Linux has a cool firewall to hanlde this, via ip-tables. But it&amp;rsquo;s so complicated to remember all the rule and syntax. That&amp;rsquo;s why UFW was born to save us. :D
You can use simple command to manage your firewall</description>
    </item>
    
    <item>
      <title>#TIL 2017-10-07 : Using netcat as tiny TCP debug tool</title>
      <link>https://khanhicetea.com/til/2017-10-07-using-netcat-as-tiny-tcp-debug-tool/</link>
      <pubDate>Sat, 07 Oct 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-10-07-using-netcat-as-tiny-tcp-debug-tool/</guid>
      <description>Using netcat as tiny TCP debug tool You can use netcat or nc as a debugging TCP tool. It can be a TCP sender and receiver with a short session (auto close when connection is closed)
Examples :
Scan ports
$ nc -zv 127.0.0.1 20-80  Check redis status
$ echo &#39;info&#39; | nc 127.0.0.1 6379  Retrieve http response
$ printf &amp;quot;GET /xinchao HTTP/1.1\r\n\r\n&amp;quot; | nc 127.0.0.1 8000 | tee xinchao.</description>
    </item>
    
    <item>
      <title>#TIL 2017-10-04 : How SMTP works</title>
      <link>https://khanhicetea.com/til/2017-10-04-how-smtp-works/</link>
      <pubDate>Wed, 04 Oct 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-10-04-how-smtp-works/</guid>
      <description>How SMTP works When a email send through an SMTP (with authentication), every SMTP server is a hop in mail routing. So it will transfer to localmail or forward the email to next hop (shortest distance via DNS MX record).
And standard port of SMTP is 25 (unsecured, but can upgrade to TLS via STARTTLS command).
$ nslookup -type=mx gmail.com 8.8.8.8 Server: 8.8.8.8 Address: 8.8.8.8#53 Non-authoritative answer: gmail.com mail exchanger = 20 alt2.</description>
    </item>
    
    <item>
      <title>#TIL 2017-09-25 : Blocking specified country to prevent from DDOS</title>
      <link>https://khanhicetea.com/til/2017-09-25-blocking-specified-country-to-prevent-from-ddos/</link>
      <pubDate>Mon, 25 Sep 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-09-25-blocking-specified-country-to-prevent-from-ddos/</guid>
      <description>Blocking specified country to prevent from DDOS Last day I checked system logs and got a lot of warning messages mentioned that my server has been attack via Brute-force. So I decided to blocked some countries from connecting to attacked ports (21, 25). They are China, Russia and US.
This site provides a list of IP blocks of specified country
http://www.ipdeny.com/ipblocks/</description>
    </item>
    
    <item>
      <title>#TIL 2017-09-07 : TCP FIN timeout</title>
      <link>https://khanhicetea.com/til/2017-09-07-tcp-fin-timeout/</link>
      <pubDate>Thu, 07 Sep 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-09-07-tcp-fin-timeout/</guid>
      <description>TCP FIN timeout The TCP FIN timeout belays the amount of time a port must be inactive before it can reused for another connection. The default is often 60 seconds, but can normally be safely reduced to 30 or even 15 seconds:
net.ipv4.tcp_fin_timeout = 15  Ref : https://www.linode.com/docs/web-servers/nginx/configure-nginx-for-optimized-performance</description>
    </item>
    
  </channel>
</rss>