<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on KhanhIceTea B(rain)-log</title>
    <link>https://khanhicetea.com/categories/database/</link>
    <description>Recent content in Database on KhanhIceTea B(rain)-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Oct 2017 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://khanhicetea.com/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#TIL 2017-10-13 : Indexes on multiple columns</title>
      <link>https://khanhicetea.com/til/2017-10-13-indexes-on-multiple-columns/</link>
      <pubDate>Fri, 13 Oct 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-10-13-indexes-on-multiple-columns/</guid>
      <description>Indexes on multiple columns Let&amp;rsquo;s say you have an indexes on 2 columns (A, B) of the table (X). So this is three use cases happen :
 You query data based on both of 2 columns =&amp;gt; Indexes will be considered You query data based on (A) =&amp;gt; Indexes will be considered You query data based on (B) =&amp;gt; Indexes will be ignored because database indexes your data by B-tree algo.</description>
    </item>
    
    <item>
      <title>#TIL 2017-04-25 : Basics about sqlite command line tool</title>
      <link>https://khanhicetea.com/til/2017-04-25-basics-about-sqlite-command-line-tool/</link>
      <pubDate>Tue, 25 Apr 2017 23:59:59 +0000</pubDate>
      
      <guid>https://khanhicetea.com/til/2017-04-25-basics-about-sqlite-command-line-tool/</guid>
      <description>Basics about sqlite command line tool We can use sqlite3 command line tool to run SQL statement in sqlite3 file.
View all table : .tables Truncate table : delete from [table_name]; then run vacuum; to clear space Close : press Ctrl ^ D to escape $ sqlite3 database.sqlite SQLite version 3.8.10.2 2015-05-20 18:17:19 Enter &amp;quot;.help&amp;quot; for usage hints. sqlite&amp;gt; .tables auth_group backend_church auth_group_permissions backend_masstime auth_permission django_admin_log auth_user django_content_type auth_user_groups django_migrations auth_user_user_permissions django_session backend_area sqlite&amp;gt; select * from auth_user; 1|pbkdf2_sha256$30000$QQSOJMiXmNly$mWUlYwZnaQGsv9UVZcdTb29P7IHrgnd7ja3T/uwFqvw=|2017-03-25 15:06:40.</description>
    </item>
    
    <item>
      <title>Backup and Restore ElasticSearch databases using Docker</title>
      <link>https://khanhicetea.com/post/backup-and-restore-elasticsearch-using-docker/</link>
      <pubDate>Sat, 19 Mar 2016 21:07:56 +0700</pubDate>
      
      <guid>https://khanhicetea.com/post/backup-and-restore-elasticsearch-using-docker/</guid>
      <description>Introduction One day, your ElasticSearch data is large and you have to move all data to another nodes or you just want backup the data file to somewhere.
ElasticSearch-Dump is a tool can help you on this situation, it&amp;rsquo;s written on NodeJS so can run multi-platform. You can view the documents here.
One way more convinient if you already have Docker is running its Docker image.
Instruction Prepare a Docker image You can build manually its Docker image by</description>
    </item>
    
  </channel>
</rss>